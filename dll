#include <stdio.h>
#include <stdlib.h>

int main() {
    struct Node {
        int data;
        struct Node* prev;
        struct Node* next;
    };

    struct Node* head = NULL;
    int choice, value, position;

    do {
        printf("\n1. Insert at first\n2. Insert at last\n3. Delete from first\n4. Delete from last\n");
        printf("5. Display\n6. Insert at position\n7. Delete at position\n8. Exit\nChoice: ");
        scanf("%d", &choice);

        if (choice == 1) {
            printf("Enter value: ");
            scanf("%d", &value);
            struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
            if (newNode == NULL) {
                printf("Memory allocation failed.\n");
                continue;
            }
            newNode->data = value;
            newNode->prev = NULL;
            newNode->next = head;
            if (head != NULL)
                head->prev = newNode;
            head = newNode;
        }

        else if (choice == 2) {
            printf("Enter value: ");
            scanf("%d", &value);
            struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
            if (newNode == NULL) {
                printf("Memory allocation failed.\n");
                continue;
            }
            newNode->data = value;
            newNode->next = NULL;
            if (head == NULL) {
                newNode->prev = NULL;
                head = newNode;
            } else {
                struct Node* temp = head;
                while (temp->next != NULL)
                    temp = temp->next;
                temp->next = newNode;
                newNode->prev = temp;
            }
        }

        else if (choice == 3) {
            if (head == NULL) {
                printf("List is empty.\n");
            } else {
                struct Node* temp = head;
                head = head->next;
                if (head != NULL)
                    head->prev = NULL;
                free(temp);
                printf("First node deleted.\n");
            }
        }

        else if (choice == 4) {
            if (head == NULL) {
                printf("List is empty.\n");
            } else if (head->next == NULL) {
                free(head);
                head = NULL;
                printf("Last node deleted.\n");
            } else {
                struct Node* temp = head;
                while (temp->next != NULL)
                    temp = temp->next;
                temp->prev->next = NULL;
                free(temp);
                printf("Last node deleted.\n");
            }
        }

        else if (choice == 5) {
            struct Node* temp = head;
            int nodeNumber = 1;
            if (head == NULL) {
                printf("List is empty.\n");
            } else {
                printf("\nDoubly Linked List:\n");
                while (temp != NULL) {
                    printf("Node %d: Data = %d, Address = %p, Prev = %p, Next = %p\n",
                           nodeNumber, temp->data, (void*)temp, (void*)temp->prev, (void*)temp->next);
                    temp = temp->next;
                    nodeNumber++;
                }
            }
        }

        else if (choice == 6) {
            printf("Enter position: ");
            scanf("%d", &position);
            printf("Enter value: ");
            scanf("%d", &value);

            if (position < 1) {
                printf("Invalid position.\n");
                continue;
            }

            struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
            if (newNode == NULL) {
                printf("Memory allocation failed.\n");
                continue;
            }
            newNode->data = value;

            if (position == 1) {
                newNode->prev = NULL;
                newNode->next = head;
                if (head != NULL)
                    head->prev = newNode;
                head = newNode;
            } else {
                struct Node* temp = head;
                int i;
                for (i = 1; temp != NULL && i < position - 1; i++) {
                    temp = temp->next;
                }

                if (temp == NULL) {
                    printf("Position out of bounds.\n");
                    free(newNode);
                    continue;
                }

                newNode->next = temp->next;
                newNode->prev = temp;
                if (temp->next != NULL)
                    temp->next->prev = newNode;
                temp->next = newNode;
            }
        }

        else if (choice == 7) {
            printf("Enter position to delete: ");
            scanf("%d", &position);
            if (head == NULL) {
                printf("List is empty.\n");
                continue;
            }
            if (position < 1) {
                printf("Invalid position.\n");
                continue;
            }
            if (position == 1) {
                struct Node* temp = head;
                head = head->next;
                if (head != NULL)
                    head->prev = NULL;
                free(temp);
                printf("Node at position 1 deleted.\n");
            } else {
                struct Node* temp = head;
                int i;
                for (i = 1; temp != NULL && i < position; i++) {
                    temp = temp->next;
                }

                if (temp == NULL) {
                    printf("Position out of bounds.\n");
                    continue;
                }

                if (temp->prev != NULL)
                    temp->prev->next = temp->next;
                if (temp->next != NULL)
                    temp->next->prev = temp->prev;

                free(temp);
                printf("Node at position %d deleted.\n", position);
            }
        }

        else if (choice == 8) {
            struct Node* temp = head;
            while (temp != NULL) {
                struct Node* next = temp->next;
                free(temp);
                temp = next;
            }
            printf("Exit code.\n");
        }

        else {
            printf("Invalid choice.\n");
        }

    } while (choice != 8);

    return 0;
}
